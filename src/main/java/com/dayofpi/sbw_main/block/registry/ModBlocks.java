package com.dayofpi.sbw_main.block.registry;

import com.dayofpi.sbw_main.Main;
import com.dayofpi.sbw_main.block.types.MushroomBlock;
import com.dayofpi.sbw_main.block.types.*;
import com.dayofpi.sbw_main.block.types.template.ModFluidBlock;
import com.dayofpi.sbw_main.world.feature.generators.AmanitaSaplingGenerator;
import com.dayofpi.sbw_main.world.registry.ModFeatures;
import com.dayofpi.sbw_main.world.registry.ModFluids;
import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
import net.minecraft.block.*;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.state.property.Properties;
import net.minecraft.util.Identifier;
import net.minecraft.util.SignType;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.intprovider.UniformIntProvider;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.BlockView;

import java.util.function.ToIntFunction;

@SuppressWarnings("SameReturnValue")

public class ModBlocks {
    public static final SignType AMANITA = new SignType("amanita"){};

    public static final Block WARP_FRAME = new PillarBlock(FabricBlockSettings.of(Material.METAL, MapColor.GOLD).requiresTool().strength(3.0F, 200F));
    public static final Block WARP_PIPE = new WarpPipeBlock(FabricBlockSettings.of(Material.METAL, MapColor.GREEN).requiresTool().strength(3.0F, 20.0F).nonOpaque().sounds(BlockSoundGroup.METAL));
    public static final Block WARP_PIPE_BODY = new WarpPipeBodyBlock(FabricBlockSettings.copyOf(WARP_PIPE));
    public static final Block EMPTY_BLOCK = new EmptyBlock(FabricBlockSettings.of(Material.METAL, MapColor.SPRUCE_BROWN).requiresTool().strength(3.0F, 200.0F).sounds(BlockSoundGroup.METAL));
    public static final Block QUESTION_BLOCK = new QuestionBlock(FabricBlockSettings.of(Material.METAL, MapColor.YELLOW).requiresTool().strength(3.0F, 200.0F).luminance(3).sounds(BlockSoundGroup.METAL));
    public static final Block COIN_BLOCK = new CoinBlock(FabricBlockSettings.of(Material.METAL, MapColor.GOLD).requiresTool().strength(3.0F, 200.0F).luminance(3).sounds(BlockSoundGroup.METAL));
    public static final Block SPIKE_TRAP = new SpikeTrapBlock(FabricBlockSettings.of(Material.METAL).requiresTool().strength(1.0F, 7.0F).sounds(BlockSoundGroup.METAL));
    public static final Block GIRDER = new GirderBlock(FabricBlockSettings.of(Material.METAL).requiresTool().mapColor(MapColor.MAGENTA).strength(1.0F, 7.0F).nonOpaque().sounds(BlockSoundGroup.METAL));
    public static final Block JUMP_BLOCK = new JumpBlock(FabricBlockSettings.of(Material.WOOD, MapColor.WHITE_GRAY).strength(0.8F).sounds(BlockSoundGroup.WOOD));
    public static final Block REDSTONE_TRAMPOLINE = new RedstoneTrampolineBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.GRAY).strength(1.0F).sounds(BlockSoundGroup.WART_BLOCK));
    public static final Block TRAMPOLINE = new TrampolineBlock(FabricBlockSettings.of(Material.WOOD, MapColor.GREEN).sounds(BlockSoundGroup.WOOD).nonOpaque());
    public static final Block TOADSTOOL_GRASS = new ToadstoolGrassBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.LIME).strength(0.5F, 4.0F).sounds(BlockSoundGroup.GRASS).ticksRandomly());
    public static final Block TOADSTOOL_TURF = new Block(FabricBlockSettings.copyOf(TOADSTOOL_GRASS));
    public static final Block TOADSTOOL_SOIL = new ToadstoolSoilBlock(FabricBlockSettings.of(Material.SOIL, MapColor.TERRACOTTA_ORANGE).strength(0.5F, 4.0F).sounds(BlockSoundGroup.GRAVEL));
    public static final Block COARSE_TOADSTOOL_SOIL = new ToadstoolSoilBlock(FabricBlockSettings.copyOf(TOADSTOOL_SOIL));
    public static final Block TOADSTOOL_FARMLAND = new ToadstoolFarmlandBlock(FabricBlockSettings.copyOf(TOADSTOOL_SOIL).ticksRandomly());
    public static final Block TOADSTOOL_PATH = new ToadstoolPathBlock(FabricBlockSettings.copyOf(TOADSTOOL_SOIL).mapColor(MapColor.BROWN));
    public static final Block HAPPY_CLOUD = new HappyCloudBlock(FabricBlockSettings.of(Material.SNOW_BLOCK, MapColor.WHITE).strength(0.1F).sounds(BlockSoundGroup.SNOW).dynamicBounds());
    public static final Block CLOUD_BLOCK = new CloudBlock(FabricBlockSettings.copyOf(HAPPY_CLOUD));
    public static final Block CLOUD_SLAB = new CloudSlabBlock(FabricBlockSettings.copyOf(CLOUD_BLOCK));
    public static final Block GRITZY_SAND = new SandBlock(16372053, FabricBlockSettings.of(Material.AGGREGATE, MapColor.TERRACOTTA_YELLOW).strength(1.0F, 3.0F).sounds(BlockSoundGroup.SAND));
    public static final Block QUICKSAND = new QuicksandBlock(FabricBlockSettings.of(Material.AGGREGATE, MapColor.TERRACOTTA_YELLOW).strength(2.0F, 3.0F).sounds(BlockSoundGroup.SAND).noCollision());
    public static final Block GRITZY_SANDSTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_YELLOW).strength(1.0F, 3.0F));
    public static final Block CHISELED_GRITZY_SANDSTONE = new Block(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block CUT_GRITZY_SANDSTONE = new Block(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block SMOOTH_GRITZY_SANDSTONE = new Block(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block GRITZY_SANDSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GRITZY_SANDSTONE));
    public static final Block GRITZY_SANDSTONE_STAIRS = new StairsBlock(GRITZY_SANDSTONE.getDefaultState(), FabricBlockSettings.copyOf(GRITZY_SANDSTONE)){};
    public static final Block SEASTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.EMERALD_GREEN).sounds(Main.TOADSTONE).strength(1.0F).requiresTool());
    public static final Block SEASTONE_BRICKS = new Block(FabricBlockSettings.copyOf(SEASTONE));
    public static final Block SEASTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(SEASTONE_BRICKS));
    public static final Block SEASTONE_BRICK_STAIRS = new StairsBlock(SEASTONE_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(SEASTONE)){};
    public static final Block STRAWBERRY_CORAL = new StrawberryCoralBlock(FabricBlockSettings.of(Material.PLANT, MapColor.PINK).strength(0.2F).sounds(BlockSoundGroup.CORAL).nonOpaque());
    public static final Block STRAWBERRY_CORAL_BLOCK = new Block(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.PINK).strength(0.4F).requiresTool().sounds(BlockSoundGroup.CORAL));
    public static final Block VANILLATE = new VanillateBlock(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_LIGHT_BLUE).requiresTool().strength(1.2F, 6.0F));
    public static final Block VANILLATE_BRICKS = new Block(FabricBlockSettings.copyOf(VANILLATE));
    public static final Block VANILLATE_TILES = new Block(FabricBlockSettings.copyOf(VANILLATE));
    public static final Block VANILLATE_CRUMBLE = new SandBlock(12636090, FabricBlockSettings.copyOf(VANILLATE).strength(0.5F).mapColor(MapColor.WHITE_GRAY));
    public static final Block VANILLATE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(VANILLATE));
    public static final Block VANILLATE_STAIRS = new StairsBlock(VANILLATE.getDefaultState(), FabricBlockSettings.copyOf(VANILLATE)){};
    public static final Block VANILLATE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(VANILLATE_BRICKS));
    public static final Block VANILLATE_BRICK_STAIRS = new StairsBlock(VANILLATE_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(VANILLATE_BRICKS)){};
    public static final Block TOPPED_VANILLATE = new Block(FabricBlockSettings.copyOf(VANILLATE).mapColor(MapColor.WHITE_GRAY));
    public static final Block COAL_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE).strength(1.5F, 6.0F), UniformIntProvider.create(0, 1));
    public static final Block IRON_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE).strength(1.5F, 6.0F), UniformIntProvider.create(0, 1));
    public static final Block GOLD_TOPPED_VANILLATE = new OreBlock(FabricBlockSettings.copyOf(TOPPED_VANILLATE).strength(1.5F, 6.0F), UniformIntProvider.create(0, 1));
    public static final Block FROSTY_VANILLATE = new VanillateBlock(FabricBlockSettings.copyOf(VANILLATE).sounds(Main.FROSTED_STONE).slipperiness(0.98F));
    public static final Block FROSTY_VANILLATE_BRICKS = new Block(FabricBlockSettings.copyOf(FROSTY_VANILLATE));
    public static final Block FROSTY_VANILLATE_TILES = new Block(FabricBlockSettings.copyOf(FROSTY_VANILLATE));
    public static final Block FROSTY_VANILLATE_CRUMBLE = new SandBlock(16119295, FabricBlockSettings.copyOf(FROSTY_VANILLATE).strength(0.5F).mapColor(MapColor.WHITE));
    public static final Block FROSTY_VANILLATE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(FROSTY_VANILLATE));
    public static final Block FROSTY_VANILLATE_STAIRS = new StairsBlock(FROSTY_VANILLATE.getDefaultState(), FabricBlockSettings.copyOf(FROSTY_VANILLATE)){};
    public static final Block FROSTY_VANILLATE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(FROSTY_VANILLATE_BRICKS));
    public static final Block FROSTY_VANILLATE_BRICK_STAIRS = new StairsBlock(FROSTY_VANILLATE_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(FROSTY_VANILLATE_BRICKS)){};
    public static final Block FROSTY_TOPPED_VANILLATE = new Block(FabricBlockSettings.copyOf(FROSTY_VANILLATE).slipperiness(1.0F));
    public static final Block FROSTY_TOPPED_VANILLATE_ORE = new OreBlock(FabricBlockSettings.copyOf(FROSTY_VANILLATE).emissiveLighting(ModBlocks::always).slipperiness(1.0F));
    public static final Block ICICLE = new IcicleBlock(FabricBlockSettings.of(Material.DENSE_ICE).strength(0.2F).nonOpaque().slipperiness(0.9F).sounds(BlockSoundGroup.GLASS));
    public static final Block BRONZE_ORE = new Block(FabricBlockSettings.copyOf(VANILLATE).strength(1.5F, 6.0F));
    public static final Block AMETHYST_ORE = new AmethystOreBlock(FabricBlockSettings.copyOf(VANILLATE).strength(1.5F, 6.0F).emissiveLighting(ModBlocks::always));
    public static final Block RAW_BRONZE_BLOCK = new Block(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_ORANGE).requiresTool().strength(5.0F, 6.0F));
    public static final Block BRONZE_BLOCK = new Block(FabricBlockSettings.of(Material.METAL, MapColor.TERRACOTTA_ORANGE).requiresTool().strength(5.0F, 8.0F).sounds(BlockSoundGroup.METAL));
    public static final Block BRONZE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(BRONZE_BLOCK));
    public static final Block BRONZE_STAIRS = new StairsBlock(BRONZE_BLOCK.getDefaultState(), FabricBlockSettings.copyOf(BRONZE_BLOCK)){};
    public static final Block DONUT_BLOCK = new DonutBlock(FabricBlockSettings.copyOf(TOADSTOOL_SOIL).strength(0.1F).nonOpaque());
    public static final Block STONE_TORCH = new StoneTorchBlock(FabricBlockSettings.copyOf(VANILLATE).nonOpaque().luminance(createLightLevelFromLitBlockState(15, 0)));
    public static final Block BOO_LANTERN = new BooLanternBlock(FabricBlockSettings.of(Material.DECORATION, MapColor.DARK_AQUA).strength(0.4F).nonOpaque().luminance(createLightLevelFromLitBlockState(14, 3)));
    public static final Block FAKE_BLOCK = new FakeBlock(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_BROWN).strength(0.6F).sounds(Main.TOADSTONE));
    public static final Block TOADSTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.TERRACOTTA_ORANGE).requiresTool().strength(1.2F, 1.0F).sounds(Main.TOADSTONE));
    public static final Block GRASSY_TOADSTONE = new Block(FabricBlockSettings.copyOf(TOADSTONE).mapColor(MapColor.DARK_GREEN).sounds(Main.GRASSY_STONE));
    public static final Block SMOOTH_TOADSTONE = new Block(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block CHISELED_TOADSTONE = new Block(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block TOADSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block TOADSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block TOADSTONE_STAIRS = new StairsBlock(TOADSTONE.getDefaultState(), FabricBlockSettings.copyOf(TOADSTONE)){};
    public static final Block TOADSTONE_WALL = new WallBlock(FabricBlockSettings.copyOf(TOADSTONE));
    public static final Block TOADSTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(TOADSTONE_BRICKS));
    public static final Block TOADSTONE_BRICK_STAIRS = new StairsBlock(TOADSTONE_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(TOADSTONE_BRICKS)){};
    public static final Block TOADSTONE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(TOADSTONE_BRICKS));
    public static final Block GLOOMSTONE = new Block(FabricBlockSettings.of(Material.STONE, MapColor.DARK_AQUA).requiresTool().strength(1.2F, 1.0F).sounds(Main.TOADSTONE));
    public static final Block SMOOTH_GLOOMSTONE = new Block(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block CHISELED_GLOOMSTONE = new Block(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block GLOOMSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block GLOOMSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block GLOOMSTONE_STAIRS = new StairsBlock(GLOOMSTONE.getDefaultState(), FabricBlockSettings.copyOf(GLOOMSTONE)){};
    public static final Block GLOOMSTONE_WALL = new WallBlock(FabricBlockSettings.copyOf(GLOOMSTONE));
    public static final Block GLOOMSTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GLOOMSTONE_BRICKS));
    public static final Block GLOOMSTONE_BRICK_STAIRS = new StairsBlock(GLOOMSTONE_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(GLOOMSTONE_BRICKS)){};
    public static final Block GLOOMSTONE_BRICK_WALL = new WallBlock(FabricBlockSettings.copyOf(GLOOMSTONE_BRICKS));
    public static final Block HARDSTONE = new PillarBlock(FabricBlockSettings.of(Material.STONE, MapColor.LIGHT_GRAY).requiresTool().strength(4.0F, 10.0F));
    public static final Block POLISHED_HARDSTONE = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block CHISELED_HARDSTONE = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block HARDSTONE_PILLAR = new PillarBlock(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block HARDSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(HARDSTONE));
    public static final Block CRACKED_HARDSTONE_BRICKS = new Block(FabricBlockSettings.copyOf(HARDSTONE_BRICKS).strength(2.0F, 5.0F));
    public static final Block POLISHED_HARDSTONE_SLAB = new SlabBlock(FabricBlockSettings.copyOf(POLISHED_HARDSTONE));
    public static final Block POLISHED_HARDSTONE_STAIRS = new StairsBlock(POLISHED_HARDSTONE.getDefaultState(), FabricBlockSettings.copyOf(POLISHED_HARDSTONE)){};
    public static final Block HARDSTONE_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(HARDSTONE_BRICKS));
    public static final Block HARDSTONE_BRICK_STAIRS = new StairsBlock(HARDSTONE_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(POLISHED_HARDSTONE)){};
    public static final Block GOLDEN_BRICKS = new Block(FabricBlockSettings.copyOf(TOADSTONE_BRICKS).sounds(BlockSoundGroup.METAL).mapColor(MapColor.GOLD));
    public static final Block GOLDEN_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(GOLDEN_BRICKS));
    public static final Block GOLDEN_BRICK_STAIRS = new StairsBlock(GOLDEN_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(GOLDEN_BRICKS)){};
    public static final Block CRYSTAL_BRICKS = new Block(FabricBlockSettings.copyOf(TOADSTONE_BRICKS).sounds(BlockSoundGroup.AMETHYST_BLOCK).mapColor(MapColor.PURPLE));
    public static final Block CRYSTAL_BRICK_SLAB = new SlabBlock(FabricBlockSettings.copyOf(CRYSTAL_BRICKS));
    public static final Block CRYSTAL_BRICK_STAIRS = new StairsBlock(CRYSTAL_BRICKS.getDefaultState(), FabricBlockSettings.copyOf(CRYSTAL_BRICKS)){};
    public static final Block AMANITA_LOG = new WoodBlock(FabricBlockSettings.of(Material.WOOD).strength(2.0F).sounds(BlockSoundGroup.WOOD));
    public static final Block AMANITA_WOOD = new WoodBlock(FabricBlockSettings.copyOf(AMANITA_LOG));
    public static final Block STRIPPED_AMANITA_LOG = new PillarBlock(FabricBlockSettings.copyOf(AMANITA_LOG));
    public static final Block STRIPPED_AMANITA_WOOD = new PillarBlock(FabricBlockSettings.copyOf(AMANITA_LOG).mapColor(MapColor.TERRACOTTA_YELLOW));
    public static final Block AMANITA_PLANKS = new Block(FabricBlockSettings.of(Material.WOOD, MapColor.TERRACOTTA_YELLOW).strength(2.0F, 3.0F).sounds(BlockSoundGroup.WOOD));
    public static final Block AMANITA_SLAB = new SlabBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS));
    public static final Block AMANITA_STAIRS = new StairsBlock(AMANITA_PLANKS.getDefaultState(), FabricBlockSettings.copyOf(AMANITA_PLANKS)){};
    public static final Block AMANITA_FENCE = new FenceBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS));
    public static final Block AMANITA_FENCE_GATE = new FenceGateBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS));
    public static final Block AMANITA_DOOR = new DoorBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(3.0F).nonOpaque()){};
    public static final Block AMANITA_TRAPDOOR = new TrapdoorBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(3.0F).nonOpaque().allowsSpawning(ModBlocks::never)){};
    public static final Block AMANITA_BUTTON = new WoodenButtonBlock(FabricBlockSettings.of(Material.DECORATION).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)){};
    public static final Block AMANITA_PRESSURE_PLATE = new PressurePlateBlock(PressurePlateBlock.ActivationRule.EVERYTHING, FabricBlockSettings.of(Material.DECORATION).noCollision().strength(0.5F).sounds(BlockSoundGroup.WOOD)){};
    public static final Block AMANITA_SIGN = new SignBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(1.0F).noCollision(), AMANITA);
    public static final Block AMANITA_WALL_SIGN = new WallSignBlock(FabricBlockSettings.copyOf(AMANITA_PLANKS).strength(1.0F).noCollision(), AMANITA);
    public static final Block AMANITA_LEAVES = new AmanitaLeavesBlock(FabricBlockSettings.of(Material.LEAVES).strength(0.2F).ticksRandomly().sounds(BlockSoundGroup.GRASS).nonOpaque().allowsSpawning(ModBlocks::canSpawnOnLeaves).suffocates(ModBlocks::never).blockVision(ModBlocks::never));
    public static final Block FRUITING_AMANITA_LEAVES = new AmanitaLeavesBlock(FabricBlockSettings.copyOf(AMANITA_LEAVES));
    public static final Block AMANITA_SAPLING = new SaplingBlock(new AmanitaSaplingGenerator(), FabricBlockSettings.of(Material.PLANT, MapColor.YELLOW).noCollision().ticksRandomly().sounds(BlockSoundGroup.GRASS)){};
    public static final Block HORSETAIL = new HorsetailBlock(FabricBlockSettings.of(Material.PLANT).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block BUSH = new BushBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block VEGETABLE = new VegetableBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.RED).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS)){};
    public static final Block BEANSTALK = new BeanstalkBlock(FabricBlockSettings.of(Material.PLANT).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS).ticksRandomly());
    public static final Block BEANSTALK_PLANT = new BeanstalkPlantBlock(FabricBlockSettings.of(Material.PLANT).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block BUDDING_BEANSTALK = new BuddingBeanstalkBlock(FabricBlockSettings.of(Material.PLANT).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS).ticksRandomly());
    public static final Block PIRANHA_LILY = new PiranhaLilyBlock(FabricBlockSettings.of(Material.PLANT, MapColor.RED).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block MUNCHER = new MuncherBlock(FabricBlockSettings.of(Material.PLANT, MapColor.BLACK).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block CAVE_MUSHROOMS = new CaveMushroomBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.TERRACOTTA_BLUE).nonOpaque().noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block AMANITA_CARPET = new CarpetBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT).noCollision().sounds(BlockSoundGroup.MOSS_CARPET));
    public static final Block YELLOW_FLOWERBED = new FlowerbedBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.YELLOW).noCollision().sounds(BlockSoundGroup.MOSS_CARPET));
    public static final Block WHITE_FLOWERBED = new FlowerbedBlock(FabricBlockSettings.of(Material.REPLACEABLE_PLANT, MapColor.WHITE).noCollision().sounds(BlockSoundGroup.MOSS_CARPET));
    public static final Block BLUE_SONGFLOWER = new FlowerBlock(StatusEffects.JUMP_BOOST, 6, FabricBlockSettings.of(Material.PLANT, MapColor.DIAMOND_BLUE).noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block PINK_SONGFLOWER = new FlowerBlock(StatusEffects.JUMP_BOOST, 6, FabricBlockSettings.of(Material.PLANT, MapColor.PINK).noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block YELLOW_SONGFLOWER = new FlowerBlock(StatusEffects.JUMP_BOOST, 6, FabricBlockSettings.of(Material.PLANT, MapColor.YELLOW).noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block PAWFLOWER = new FlowerBlock(StatusEffects.SPEED, 6, FabricBlockSettings.of(Material.PLANT, MapColor.OFF_WHITE).noCollision().sounds(BlockSoundGroup.GRASS));
    public static final Block FIRE_TULIP = new FireTulipBlock(StatusEffects.FIRE_RESISTANCE, 6, FabricBlockSettings.of(Material.PLANT, MapColor.ORANGE).noCollision().sounds(BlockSoundGroup.GRASS).emissiveLighting(ModBlocks::always));
    public static final Block BEANSTALK_BLOCK = new PillarBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.GREEN).strength(2.0F).sounds(BlockSoundGroup.NETHER_STEM));
    public static final Block MUSHROOM_STEM = new PillarBlock(FabricBlockSettings.of(Material.WOOD, MapColor.OFF_WHITE).strength(2.0F).sounds(BlockSoundGroup.NETHER_STEM));
    public static final Block BROWN_MUSHROOM_CAP = new MushroomBlock(FabricBlockSettings.of(Material.SOLID_ORGANIC, MapColor.DIRT_BROWN).strength(1.0F).sounds(BlockSoundGroup.WART_BLOCK));
    public static final Block RED_MUSHROOM_CAP = new BouncyMushroomBlock(FabricBlockSettings.copyOf(BROWN_MUSHROOM_CAP).mapColor(MapColor.RED));
    public static final Block YELLOW_MUSHROOM_CAP = new MushroomBlock(FabricBlockSettings.copyOf(BROWN_MUSHROOM_CAP).mapColor(MapColor.YELLOW));
    public static final Block GREEN_MUSHROOM_CAP = new MushroomBlock(FabricBlockSettings.copyOf(BROWN_MUSHROOM_CAP).mapColor(MapColor.EMERALD_GREEN));
    public static final Block PINK_MUSHROOM_CAP = new BouncyMushroomBlock(FabricBlockSettings.copyOf(BROWN_MUSHROOM_CAP).mapColor(MapColor.PINK));
    public static final Block PURPLE_MUSHROOM_CAP = new MushroomBlock(FabricBlockSettings.copyOf(BROWN_MUSHROOM_CAP).mapColor(MapColor.PURPLE));
    public static final Block ORANGE_MUSHROOM_CAP = new BouncyMushroomBlock(FabricBlockSettings.copyOf(BROWN_MUSHROOM_CAP).mapColor(MapColor.ORANGE));
    public static final Block YELLOW_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.of(Material.PLANT, MapColor.YELLOW).noCollision().ticksRandomly().sounds(BlockSoundGroup.GRASS), () -> ModFeatures.HUGE_YELLOW_MUSHROOM);
    public static final Block GREEN_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.copyOf(YELLOW_MUSHROOM).mapColor(MapColor.EMERALD_GREEN).luminance(6), () -> ModFeatures.HUGE_GREEN_MUSHROOM);
    public static final Block PINK_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.copyOf(YELLOW_MUSHROOM).mapColor(MapColor.PINK), () -> ModFeatures.HUGE_PINK_MUSHROOM);
    public static final Block PURPLE_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.copyOf(YELLOW_MUSHROOM).mapColor(MapColor.PURPLE), () -> ModFeatures.HUGE_PURPLE_MUSHROOM);
    public static final Block ORANGE_MUSHROOM = new MushroomPlantBlock(FabricBlockSettings.copyOf(YELLOW_MUSHROOM).mapColor(MapColor.ORANGE), () -> ModFeatures.HUGE_ORANGE_MUSHROOM);
    public static final Block WHITE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.WHITE));
    public static final Block ORANGE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.ORANGE));
    public static final Block MAGENTA_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.MAGENTA));
    public static final Block LIGHT_BLUE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.LIGHT_BLUE));
    public static final Block YELLOW_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.YELLOW));
    public static final Block LIME_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.LIME));
    public static final Block PINK_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.PINK));
    public static final Block GRAY_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.GRAY));
    public static final Block LIGHT_GRAY_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.LIGHT_GRAY));
    public static final Block CYAN_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.CYAN));
    public static final Block PURPLE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.PURPLE));
    public static final Block BLUE_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.BLUE));
    public static final Block BROWN_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.BROWN));
    public static final Block GREEN_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.GREEN));
    public static final Block RED_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.RED));
    public static final Block BLACK_BRONZE = new Block(FabricBlockSettings.copyOf(BRONZE_BLOCK).mapColor(MapColor.BLACK));
    public static final Block POISON = new ModFluidBlock(ModFluids.STILL_POISON, FabricBlockSettings.of(Material.LAVA, MapColor.PURPLE).noCollision().ticksRandomly().strength(100.0F).luminance(7));
    public static final Block POTTED_AMANITA_SAPLING = new FlowerPotBlock(AMANITA_SAPLING, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_FIRE_TULIP = new FlowerPotBlock(FIRE_TULIP, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque().emissiveLighting(ModBlocks::always));
    public static final Block POTTED_MUNCHER = new FlowerPotBlock(MUNCHER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_CAVE_MUSHROOMS = new FlowerPotBlock(CAVE_MUSHROOMS, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_PIRANHA_LILY = new FlowerPotBlock(PIRANHA_LILY, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_PAWFLOWER = new FlowerPotBlock(PAWFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_BLUE_SONGFLOWER = new FlowerPotBlock(BLUE_SONGFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_PINK_SONGFLOWER = new FlowerPotBlock(PINK_SONGFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_YELLOW_SONGFLOWER = new FlowerPotBlock(YELLOW_SONGFLOWER, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_YELLOW_MUSHROOM = new FlowerPotBlock(YELLOW_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_GREEN_MUSHROOM = new FlowerPotBlock(GREEN_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_PINK_MUSHROOM = new FlowerPotBlock(PINK_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_PURPLE_MUSHROOM = new FlowerPotBlock(PURPLE_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_ORANGE_MUSHROOM = new FlowerPotBlock(ORANGE_MUSHROOM, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_HORSETAIL = new FlowerPotBlock(HORSETAIL, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_BUSH = new FlowerPotBlock(BUSH, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_BEANSTALK = new FlowerPotBlock(BEANSTALK, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());
    public static final Block POTTED_BUDDING_BEANSTALK = new FlowerPotBlock(BUDDING_BEANSTALK, FabricBlockSettings.of(Material.DECORATION).breakInstantly().nonOpaque());

    private static Boolean canSpawnOnLeaves(BlockState state, BlockView world, BlockPos pos, EntityType<?> type) {
        return type == EntityType.OCELOT || type == EntityType.PARROT;
    }

    private static boolean never(BlockState state, BlockView world, BlockPos pos) {
        return false;
    }

    private static boolean always(BlockState state, BlockView world, BlockPos pos) {
        return true;
    }

    private static boolean never(BlockState state, BlockView world, BlockPos pos, EntityType<?> type) {
        return false;
    }

    private static ToIntFunction<BlockState> createLightLevelFromLitBlockState(int onLevel, int offLevel) {
        return (state) -> (Boolean) state.get(Properties.LIT) ? onLevel : offLevel;
    }

    public static void registerBlocks() {
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "warp_frame"), WARP_FRAME);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "warp_pipe"), WARP_PIPE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "warp_pipe_body"), WARP_PIPE_BODY);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "empty_block"), EMPTY_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "question_block"), QUESTION_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "coin_block"), COIN_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "spike_trap"), SPIKE_TRAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "girder"), GIRDER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "jump_block"), JUMP_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "redstone_trampoline"), REDSTONE_TRAMPOLINE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "stone_torch"), STONE_TORCH);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "boo_lantern"), BOO_LANTERN);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "donut_block"), DONUT_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "trampoline"), TRAMPOLINE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstool_grass"), TOADSTOOL_GRASS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstool_turf"), TOADSTOOL_TURF);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstool_soil"), TOADSTOOL_SOIL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "coarse_toadstool_soil"), COARSE_TOADSTOOL_SOIL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstool_farmland"), TOADSTOOL_FARMLAND);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstool_path"), TOADSTOOL_PATH);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gritzy_sand"), GRITZY_SAND);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "quicksand"), QUICKSAND);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gritzy_sandstone"), GRITZY_SANDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "chiseled_gritzy_sandstone"), CHISELED_GRITZY_SANDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "cut_gritzy_sandstone"), CUT_GRITZY_SANDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "smooth_gritzy_sandstone"), SMOOTH_GRITZY_SANDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gritzy_sandstone_slab"), GRITZY_SANDSTONE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gritzy_sandstone_stairs"), GRITZY_SANDSTONE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "happy_cloud"), HAPPY_CLOUD);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "cloud_block"), CLOUD_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "cloud_slab"), CLOUD_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate"), VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_bricks"), VANILLATE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_tiles"), VANILLATE_TILES);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_crumble"), VANILLATE_CRUMBLE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_slab"), VANILLATE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_stairs"), VANILLATE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_brick_slab"), VANILLATE_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vanillate_brick_stairs"), VANILLATE_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate"), FROSTY_VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_bricks"), FROSTY_VANILLATE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_tiles"), FROSTY_VANILLATE_TILES);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_crumble"), FROSTY_VANILLATE_CRUMBLE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_slab"), FROSTY_VANILLATE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_stairs"), FROSTY_VANILLATE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_brick_slab"), FROSTY_VANILLATE_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_vanillate_brick_stairs"), FROSTY_VANILLATE_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_topped_vanillate"), FROSTY_TOPPED_VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "frosty_topped_vanillate_ore"), FROSTY_TOPPED_VANILLATE_ORE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "icicle"), ICICLE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "topped_vanillate"), TOPPED_VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "coal_topped_vanillate"), COAL_TOPPED_VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "iron_topped_vanillate"), IRON_TOPPED_VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gold_topped_vanillate"), GOLD_TOPPED_VANILLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "bronze_ore"), BRONZE_ORE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amethyst_ore"), AMETHYST_ORE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "raw_bronze_block"), RAW_BRONZE_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "bronze_block"), BRONZE_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "bronze_slab"), BRONZE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "bronze_stairs"), BRONZE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "fake_block"), FAKE_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone"), TOADSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "grassy_toadstone"), GRASSY_TOADSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "smooth_toadstone"), SMOOTH_TOADSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "chiseled_toadstone"), CHISELED_TOADSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_bricks"), TOADSTONE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_slab"), TOADSTONE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_stairs"), TOADSTONE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_wall"), TOADSTONE_WALL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_brick_slab"), TOADSTONE_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_brick_stairs"), TOADSTONE_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "toadstone_brick_wall"), TOADSTONE_BRICK_WALL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone"), GLOOMSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "smooth_gloomstone"), SMOOTH_GLOOMSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "chiseled_gloomstone"), CHISELED_GLOOMSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_bricks"), GLOOMSTONE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_slab"), GLOOMSTONE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_stairs"), GLOOMSTONE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_wall"), GLOOMSTONE_WALL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_brick_slab"), GLOOMSTONE_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_brick_stairs"), GLOOMSTONE_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gloomstone_brick_wall"), GLOOMSTONE_BRICK_WALL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "golden_bricks"), GOLDEN_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "golden_brick_slab"), GOLDEN_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "golden_brick_stairs"), GOLDEN_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "crystal_bricks"), CRYSTAL_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "crystal_brick_slab"), CRYSTAL_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "crystal_brick_stairs"), CRYSTAL_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "hardstone"), HARDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "polished_hardstone"), POLISHED_HARDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "chiseled_hardstone"), CHISELED_HARDSTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "hardstone_pillar"), HARDSTONE_PILLAR);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "hardstone_bricks"), HARDSTONE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "cracked_hardstone_bricks"), CRACKED_HARDSTONE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "polished_hardstone_slab"), POLISHED_HARDSTONE_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "polished_hardstone_stairs"), POLISHED_HARDSTONE_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "hardstone_brick_slab"), HARDSTONE_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "hardstone_brick_stairs"), HARDSTONE_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_log"), AMANITA_LOG);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_wood"), AMANITA_WOOD);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "stripped_amanita_log"), STRIPPED_AMANITA_LOG);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "stripped_amanita_wood"), STRIPPED_AMANITA_WOOD);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_planks"), AMANITA_PLANKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_slab"), AMANITA_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_stairs"), AMANITA_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_fence"), AMANITA_FENCE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_fence_gate"), AMANITA_FENCE_GATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_door"), AMANITA_DOOR);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_trapdoor"), AMANITA_TRAPDOOR);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_button"), AMANITA_BUTTON);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_pressure_plate"), AMANITA_PRESSURE_PLATE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_sign"), AMANITA_SIGN);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_wall_sign"), AMANITA_WALL_SIGN);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_leaves"), AMANITA_LEAVES);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "fruiting_amanita_leaves"), FRUITING_AMANITA_LEAVES);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_sapling"), AMANITA_SAPLING);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "horsetail"), HORSETAIL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "bush"), BUSH);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "vegetable"), VEGETABLE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "beanstalk"), BEANSTALK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "beanstalk_plant"), BEANSTALK_PLANT);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "budding_beanstalk"), BUDDING_BEANSTALK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "piranha_lily"), PIRANHA_LILY);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "muncher"), MUNCHER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "cave_mushrooms"), CAVE_MUSHROOMS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "strawberry_coral"), STRAWBERRY_CORAL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "strawberry_coral_block"), STRAWBERRY_CORAL_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "seastone"), SEASTONE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "seastone_bricks"), SEASTONE_BRICKS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "seastone_brick_slab"), SEASTONE_BRICK_SLAB);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "seastone_brick_stairs"), SEASTONE_BRICK_STAIRS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "beanstalk_block"), BEANSTALK_BLOCK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "mushroom_stem"), MUSHROOM_STEM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "brown_mushroom_cap"), BROWN_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "red_mushroom_cap"), RED_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "yellow_mushroom_cap"), YELLOW_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "green_mushroom_cap"), GREEN_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "pink_mushroom_cap"), PINK_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "purple_mushroom_cap"), PURPLE_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "orange_mushroom_cap"), ORANGE_MUSHROOM_CAP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "yellow_mushroom"), YELLOW_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "green_mushroom"), GREEN_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "pink_mushroom"), PINK_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "purple_mushroom"), PURPLE_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "orange_mushroom"), ORANGE_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "amanita_carpet"), AMANITA_CARPET);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "yellow_flowerbed"), YELLOW_FLOWERBED);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "white_flowerbed"), WHITE_FLOWERBED);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "blue_songflower"), BLUE_SONGFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "pink_songflower"), PINK_SONGFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "yellow_songflower"), YELLOW_SONGFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "pawflower"), PAWFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "fire_tulip"), FIRE_TULIP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "white_bronze"), WHITE_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "orange_bronze"), ORANGE_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "magenta_bronze"), MAGENTA_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "light_blue_bronze"), LIGHT_BLUE_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "yellow_bronze"), YELLOW_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "lime_bronze"), LIME_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "pink_bronze"), PINK_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "gray_bronze"), GRAY_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "light_gray_bronze"), LIGHT_GRAY_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "cyan_bronze"), CYAN_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "purple_bronze"), PURPLE_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "blue_bronze"), BLUE_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "brown_bronze"), BROWN_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "green_bronze"), GREEN_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "red_bronze"), RED_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "black_bronze"), BLACK_BRONZE);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "poison"), POISON);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_fire_tulip"), POTTED_FIRE_TULIP);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_muncher"), POTTED_MUNCHER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_cave_mushrooms"), POTTED_CAVE_MUSHROOMS);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_piranha_lily"), POTTED_PIRANHA_LILY);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_blue_songflower"), POTTED_BLUE_SONGFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_pink_songflower"), POTTED_PINK_SONGFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_yellow_songflower"), POTTED_YELLOW_SONGFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_pawflower"), POTTED_PAWFLOWER);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_green_mushroom"), POTTED_GREEN_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_pink_mushroom"), POTTED_PINK_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_purple_mushroom"), POTTED_PURPLE_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_orange_mushroom"), POTTED_ORANGE_MUSHROOM);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_amanita_sapling"), POTTED_AMANITA_SAPLING);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_horsetail"), POTTED_HORSETAIL);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_bush"), POTTED_BUSH);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_beanstalk"), POTTED_BEANSTALK);
        Registry.register(Registry.BLOCK, new Identifier(Main.MOD_ID, "potted_budding_beanstalk"), POTTED_BUDDING_BEANSTALK);
        ModBlockEntities.registerBlockEntities();
    }
}